import { Key, useMemo } from "react";
import { ControlledStateProps } from "../type-utils";
import { useLatest } from "@intellij-platform/core/utils/useLatest";
import { useControllableSet } from "@intellij-platform/core/utils/useSet";
import {
  NestedSelection,
  NestedSelectionState,
  TreeModel,
} from "@intellij-platform/core/TreeCheckboxes/NestedSelection";

/**
 * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,
 * it manages selection of leaves in a tree.
 *
 * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it
 * returns the top level nodes.
 * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be
 * **immutable**. in other words, any change in the tree, should result in a new array of top level items.
 */

export const useNestedSelectionState = <T extends object, K = Key>(
  tree: TreeModel<T, K>,
  {
    selectedKeys: selectedKeysProp,
    defaultSelectedKeys,
    onSelectedKeysChange,
  }: ControlledStateProps<{
    selectedKeys: Set<K>;
  }>
): NestedSelectionState<T> => {
  const [selectedKeys, selectedKeysSetter] = useControllableSet(
    selectedKeysProp!, // bad typing in useControlledState
    defaultSelectedKeys || new Set(),
    onSelectedKeysChange! // bad typing in useControlledState
  );
  const treeRef = useLatest(tree);

  return useMemo(
    () =>
      new NestedSelection<T, K>(
        { items: selectedKeys, ...selectedKeysSetter },
        treeRef.current
      ),
    [selectedKeys, tree.rootNodes]
  );
};
